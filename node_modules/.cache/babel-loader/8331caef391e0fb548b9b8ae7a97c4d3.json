{"ast":null,"code":"// Video.js\nimport React,{useEffect,useRef}from'react';import Avatar from'react-avatar';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Video=function Video(_ref){var username=_ref.username,stream=_ref.stream,socket=_ref.socket,roomId=_ref.roomId;var localVideoRef=useRef();var remoteVideoRef=useRef();var peerConnection=new RTCPeerConnection();useEffect(function(){if(stream){// Display the video stream if available\nlocalVideoRef.current.srcObject=stream;peerConnection.addStream(stream);}// Listen for remote stream and display it\npeerConnection.onaddstream=function(event){remoteVideoRef.current.srcObject=event.stream;};// Listen for ICE candidates and send them to the signaling server\npeerConnection.onicecandidate=function(event){if(event.candidate){socket.emit('ice-candidate',{roomId:roomId,candidate:event.candidate});}};// Listen for signaling events (offer, answer)\nsocket.on('offer',function(_ref2){var roomId=_ref2.roomId,offer=_ref2.offer;peerConnection.setRemoteDescription(new RTCSessionDescription(offer));peerConnection.createAnswer().then(function(answer){peerConnection.setLocalDescription(answer);socket.emit('answer',{roomId:roomId,answer:answer});}).catch(function(error){return console.error('Error creating answer:',error);});});socket.on('answer',function(_ref3){var roomId=_ref3.roomId,answer=_ref3.answer;peerConnection.setRemoteDescription(new RTCSessionDescription(answer));});// Create offer and emit it to the signaling server\npeerConnection.createOffer().then(function(offer){peerConnection.setLocalDescription(offer);socket.emit('offer',{roomId:roomId,offer:offer});}).catch(function(error){return console.error('Error creating offer:',error);});},[stream]);return/*#__PURE__*/_jsxs(\"div\",{children:[stream?/*#__PURE__*/_jsx(\"video\",{ref:localVideoRef,autoPlay:true,playsInline:true,muted:!stream.getAudioTracks().length}):/*#__PURE__*/_jsx(Avatar,{name:username,size:40,round:\"12px\"}),stream&&/*#__PURE__*/_jsx(\"video\",{ref:remoteVideoRef,autoPlay:true,playsInline:true})]});};export default Video;","map":{"version":3,"sources":["C:/Users/Muhammad suhail/Desktop/realtime-code-editor-main/src/components/Video.js"],"names":["React","useEffect","useRef","Avatar","Video","username","stream","socket","roomId","localVideoRef","remoteVideoRef","peerConnection","RTCPeerConnection","current","srcObject","addStream","onaddstream","event","onicecandidate","candidate","emit","on","offer","setRemoteDescription","RTCSessionDescription","createAnswer","then","answer","setLocalDescription","catch","error","console","createOffer","getAudioTracks","length"],"mappings":"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","sourcesContent":["// Video.js\r\n\r\nimport React, { useEffect, useRef } from 'react';\r\nimport Avatar from 'react-avatar';\r\n\r\nconst Video = ({ username, stream, socket, roomId }) => {\r\n    const localVideoRef = useRef();\r\n    const remoteVideoRef = useRef();\r\n    const peerConnection = new RTCPeerConnection();\r\n\r\n    useEffect(() => {\r\n        if (stream) {\r\n            // Display the video stream if available\r\n            localVideoRef.current.srcObject = stream;\r\n            peerConnection.addStream(stream);\r\n        }\r\n\r\n        // Listen for remote stream and display it\r\n        peerConnection.onaddstream = (event) => {\r\n            remoteVideoRef.current.srcObject = event.stream;\r\n        };\r\n\r\n        // Listen for ICE candidates and send them to the signaling server\r\n        peerConnection.onicecandidate = (event) => {\r\n            if (event.candidate) {\r\n                socket.emit('ice-candidate', { roomId, candidate: event.candidate });\r\n            }\r\n        };\r\n\r\n        // Listen for signaling events (offer, answer)\r\n        socket.on('offer', ({ roomId, offer }) => {\r\n            peerConnection.setRemoteDescription(new RTCSessionDescription(offer));\r\n            peerConnection.createAnswer()\r\n                .then((answer) => {\r\n                    peerConnection.setLocalDescription(answer);\r\n                    socket.emit('answer', { roomId, answer });\r\n                })\r\n                .catch((error) => console.error('Error creating answer:', error));\r\n        });\r\n\r\n        socket.on('answer', ({ roomId, answer }) => {\r\n            peerConnection.setRemoteDescription(new RTCSessionDescription(answer));\r\n        });\r\n\r\n        // Create offer and emit it to the signaling server\r\n        peerConnection.createOffer()\r\n            .then((offer) => {\r\n                peerConnection.setLocalDescription(offer);\r\n                socket.emit('offer', { roomId, offer });\r\n            })\r\n            .catch((error) => console.error('Error creating offer:', error));\r\n\r\n    }, [stream]);\r\n\r\n    return (\r\n        <div>\r\n            {stream ? (\r\n                <video ref={localVideoRef} autoPlay playsInline muted={!stream.getAudioTracks().length} />\r\n            ) : (\r\n                <Avatar name={username} size={40} round=\"12px\" />\r\n            )}\r\n            {stream && (\r\n                <video ref={remoteVideoRef} autoPlay playsInline />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Video;\r\n"]},"metadata":{},"sourceType":"module"}