{"ast":null,"code":"import _slicedToArray from\"C:/Users/Muhammad suhail/Desktop/realtime-code-editor-main/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";// Video.js\nimport React,{useEffect,useRef,useState}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Video=function Video(_ref){var username=_ref.username,stream=_ref.stream,socket=_ref.socket,roomId=_ref.roomId;var localVideoRef=useRef();var remoteVideoRef=useRef();var peerConnection=new RTCPeerConnection();var _useState=useState(true),_useState2=_slicedToArray(_useState,2),videoEnabled=_useState2[0],setVideoEnabled=_useState2[1];useEffect(function(){if(stream){var videoTrack=stream.getVideoTracks()[0];if(videoTrack){videoTrack.enabled=videoEnabled;localVideoRef.current.srcObject=stream;peerConnection.addStream(stream);}}// Listen for remote stream and display it\npeerConnection.onaddstream=function(event){remoteVideoRef.current.srcObject=event.stream;};// Listen for ICE candidates and send them to the signaling server\npeerConnection.onicecandidate=function(event){if(event.candidate){socket.emit('ice-candidate',{roomId:roomId,candidate:event.candidate});}};// Listen for signaling events (offer, answer)\nsocket.on('offer',function(_ref2){var roomId=_ref2.roomId,offer=_ref2.offer;peerConnection.setRemoteDescription(new RTCSessionDescription(offer));peerConnection.createAnswer().then(function(answer){peerConnection.setLocalDescription(answer);socket.emit('answer',{roomId:roomId,answer:answer});}).catch(function(error){return console.error('Error creating answer:',error);});});socket.on('answer',function(_ref3){var roomId=_ref3.roomId,answer=_ref3.answer;peerConnection.setRemoteDescription(new RTCSessionDescription(answer));});// Create offer and emit it to the signaling server\npeerConnection.createOffer().then(function(offer){peerConnection.setLocalDescription(offer);socket.emit('offer',{roomId:roomId,offer:offer});}).catch(function(error){return console.error('Error creating offer:',error);});},[stream,videoEnabled]);var toggleVideo=function toggleVideo(){setVideoEnabled(function(prev){return!prev;});};return/*#__PURE__*/_jsxs(\"div\",{children:[stream?/*#__PURE__*/_jsxs(\"div\",{className:\"videoContainer\",children:[/*#__PURE__*/_jsx(\"video\",{ref:localVideoRef,autoPlay:true,playsInline:true,muted:!stream.getAudioTracks().length}),/*#__PURE__*/_jsx(\"button\",{onClick:toggleVideo,children:videoEnabled?'Disable Video':'Enable Video'})]}):/*#__PURE__*/_jsx(Avatar,{name:username,size:100,round:\"12px\"}),stream&&/*#__PURE__*/_jsx(\"video\",{ref:remoteVideoRef,autoPlay:true,playsInline:true})]});};export default Video;","map":{"version":3,"sources":["C:/Users/Muhammad suhail/Desktop/realtime-code-editor-main/src/components/Video.js"],"names":["React","useEffect","useRef","useState","Video","username","stream","socket","roomId","localVideoRef","remoteVideoRef","peerConnection","RTCPeerConnection","videoEnabled","setVideoEnabled","videoTrack","getVideoTracks","enabled","current","srcObject","addStream","onaddstream","event","onicecandidate","candidate","emit","on","offer","setRemoteDescription","RTCSessionDescription","createAnswer","then","answer","setLocalDescription","catch","error","console","createOffer","toggleVideo","prev","getAudioTracks","length"],"mappings":"gJAAA;AAEA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,MAA3B,CAAmCC,QAAnC,KAAmD,OAAnD,C,wFAEA,GAAMC,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,MAA0C,IAAvCC,CAAAA,QAAuC,MAAvCA,QAAuC,CAA7BC,MAA6B,MAA7BA,MAA6B,CAArBC,MAAqB,MAArBA,MAAqB,CAAbC,MAAa,MAAbA,MAAa,CACpD,GAAMC,CAAAA,aAAa,CAAGP,MAAM,EAA5B,CACA,GAAMQ,CAAAA,cAAc,CAAGR,MAAM,EAA7B,CACA,GAAMS,CAAAA,cAAc,CAAG,GAAIC,CAAAA,iBAAJ,EAAvB,CACA,cAAwCT,QAAQ,CAAC,IAAD,CAAhD,wCAAOU,YAAP,eAAqBC,eAArB,eAEAb,SAAS,CAAC,UAAM,CACZ,GAAIK,MAAJ,CAAY,CACR,GAAMS,CAAAA,UAAU,CAAGT,MAAM,CAACU,cAAP,GAAwB,CAAxB,CAAnB,CACA,GAAID,UAAJ,CAAgB,CACZA,UAAU,CAACE,OAAX,CAAqBJ,YAArB,CACAJ,aAAa,CAACS,OAAd,CAAsBC,SAAtB,CAAkCb,MAAlC,CACAK,cAAc,CAACS,SAAf,CAAyBd,MAAzB,EACH,CACJ,CAED;AACAK,cAAc,CAACU,WAAf,CAA6B,SAACC,KAAD,CAAW,CACpCZ,cAAc,CAACQ,OAAf,CAAuBC,SAAvB,CAAmCG,KAAK,CAAChB,MAAzC,CACH,CAFD,CAIA;AACAK,cAAc,CAACY,cAAf,CAAgC,SAACD,KAAD,CAAW,CACvC,GAAIA,KAAK,CAACE,SAAV,CAAqB,CACjBjB,MAAM,CAACkB,IAAP,CAAY,eAAZ,CAA6B,CAAEjB,MAAM,CAANA,MAAF,CAAUgB,SAAS,CAAEF,KAAK,CAACE,SAA3B,CAA7B,EACH,CACJ,CAJD,CAMA;AACAjB,MAAM,CAACmB,EAAP,CAAU,OAAV,CAAmB,eAAuB,IAApBlB,CAAAA,MAAoB,OAApBA,MAAoB,CAAZmB,KAAY,OAAZA,KAAY,CACtChB,cAAc,CAACiB,oBAAf,CAAoC,GAAIC,CAAAA,qBAAJ,CAA0BF,KAA1B,CAApC,EACAhB,cAAc,CAACmB,YAAf,GACKC,IADL,CACU,SAACC,MAAD,CAAY,CACdrB,cAAc,CAACsB,mBAAf,CAAmCD,MAAnC,EACAzB,MAAM,CAACkB,IAAP,CAAY,QAAZ,CAAsB,CAAEjB,MAAM,CAANA,MAAF,CAAUwB,MAAM,CAANA,MAAV,CAAtB,EACH,CAJL,EAKKE,KALL,CAKW,SAACC,KAAD,QAAWC,CAAAA,OAAO,CAACD,KAAR,CAAc,wBAAd,CAAwCA,KAAxC,CAAX,EALX,EAMH,CARD,EAUA5B,MAAM,CAACmB,EAAP,CAAU,QAAV,CAAoB,eAAwB,IAArBlB,CAAAA,MAAqB,OAArBA,MAAqB,CAAbwB,MAAa,OAAbA,MAAa,CACxCrB,cAAc,CAACiB,oBAAf,CAAoC,GAAIC,CAAAA,qBAAJ,CAA0BG,MAA1B,CAApC,EACH,CAFD,EAIA;AACArB,cAAc,CAAC0B,WAAf,GACKN,IADL,CACU,SAACJ,KAAD,CAAW,CACbhB,cAAc,CAACsB,mBAAf,CAAmCN,KAAnC,EACApB,MAAM,CAACkB,IAAP,CAAY,OAAZ,CAAqB,CAAEjB,MAAM,CAANA,MAAF,CAAUmB,KAAK,CAALA,KAAV,CAArB,EACH,CAJL,EAKKO,KALL,CAKW,SAACC,KAAD,QAAWC,CAAAA,OAAO,CAACD,KAAR,CAAc,uBAAd,CAAuCA,KAAvC,CAAX,EALX,EAOH,CA7CQ,CA6CN,CAAC7B,MAAD,CAASO,YAAT,CA7CM,CAAT,CA+CA,GAAMyB,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,EAAM,CACtBxB,eAAe,CAAC,SAACyB,IAAD,QAAU,CAACA,IAAX,EAAD,CAAf,CACH,CAFD,CAIA,mBACI,uBACKjC,MAAM,cACH,aAAK,SAAS,CAAC,gBAAf,wBACI,cAAO,GAAG,CAAEG,aAAZ,CAA2B,QAAQ,KAAnC,CAAoC,WAAW,KAA/C,CAAgD,KAAK,CAAE,CAACH,MAAM,CAACkC,cAAP,GAAwBC,MAAhF,EADJ,cAEI,eAAQ,OAAO,CAAEH,WAAjB,UACKzB,YAAY,CAAG,eAAH,CAAqB,cADtC,EAFJ,GADG,cAQH,KAAC,MAAD,EAAQ,IAAI,CAAER,QAAd,CAAwB,IAAI,CAAE,GAA9B,CAAmC,KAAK,CAAC,MAAzC,EATR,CAWKC,MAAM,eACH,cAAO,GAAG,CAAEI,cAAZ,CAA4B,QAAQ,KAApC,CAAqC,WAAW,KAAhD,EAZR,GADJ,CAiBH,CA1ED,CA4EA,cAAeN,CAAAA,KAAf","sourcesContent":["// Video.js\r\n\r\nimport React, { useEffect, useRef, useState } from 'react';\r\n\r\nconst Video = ({ username, stream, socket, roomId }) => {\r\n    const localVideoRef = useRef();\r\n    const remoteVideoRef = useRef();\r\n    const peerConnection = new RTCPeerConnection();\r\n    const [videoEnabled, setVideoEnabled] = useState(true);\r\n\r\n    useEffect(() => {\r\n        if (stream) {\r\n            const videoTrack = stream.getVideoTracks()[0];\r\n            if (videoTrack) {\r\n                videoTrack.enabled = videoEnabled;\r\n                localVideoRef.current.srcObject = stream;\r\n                peerConnection.addStream(stream);\r\n            }\r\n        }\r\n\r\n        // Listen for remote stream and display it\r\n        peerConnection.onaddstream = (event) => {\r\n            remoteVideoRef.current.srcObject = event.stream;\r\n        };\r\n\r\n        // Listen for ICE candidates and send them to the signaling server\r\n        peerConnection.onicecandidate = (event) => {\r\n            if (event.candidate) {\r\n                socket.emit('ice-candidate', { roomId, candidate: event.candidate });\r\n            }\r\n        };\r\n\r\n        // Listen for signaling events (offer, answer)\r\n        socket.on('offer', ({ roomId, offer }) => {\r\n            peerConnection.setRemoteDescription(new RTCSessionDescription(offer));\r\n            peerConnection.createAnswer()\r\n                .then((answer) => {\r\n                    peerConnection.setLocalDescription(answer);\r\n                    socket.emit('answer', { roomId, answer });\r\n                })\r\n                .catch((error) => console.error('Error creating answer:', error));\r\n        });\r\n\r\n        socket.on('answer', ({ roomId, answer }) => {\r\n            peerConnection.setRemoteDescription(new RTCSessionDescription(answer));\r\n        });\r\n\r\n        // Create offer and emit it to the signaling server\r\n        peerConnection.createOffer()\r\n            .then((offer) => {\r\n                peerConnection.setLocalDescription(offer);\r\n                socket.emit('offer', { roomId, offer });\r\n            })\r\n            .catch((error) => console.error('Error creating offer:', error));\r\n\r\n    }, [stream, videoEnabled]);\r\n\r\n    const toggleVideo = () => {\r\n        setVideoEnabled((prev) => !prev);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {stream ? (\r\n                <div className=\"videoContainer\">\r\n                    <video ref={localVideoRef} autoPlay playsInline muted={!stream.getAudioTracks().length} />\r\n                    <button onClick={toggleVideo}>\r\n                        {videoEnabled ? 'Disable Video' : 'Enable Video'}\r\n                    </button>\r\n                </div>\r\n            ) : (\r\n                <Avatar name={username} size={100} round=\"12px\" />\r\n            )}\r\n            {stream && (\r\n                <video ref={remoteVideoRef} autoPlay playsInline />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Video;\r\n"]},"metadata":{},"sourceType":"module"}