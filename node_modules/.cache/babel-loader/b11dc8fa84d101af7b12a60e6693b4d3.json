{"ast":null,"code":"// Video.js\nimport React,{useEffect,useRef}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Video=function Video(_ref){var socket=_ref.socket,roomId=_ref.roomId;var localVideoRef=useRef();var remoteVideoRef=useRef();var peerConnection=new RTCPeerConnection();useEffect(function(){// Get user media and display it locally\nnavigator.mediaDevices.getUserMedia({video:true,audio:true}).then(function(stream){localVideoRef.current.srcObject=stream;peerConnection.addStream(stream);}).catch(function(error){return console.error('Error accessing media devices:',error);});// Listen for remote stream and display it\npeerConnection.onaddstream=function(event){remoteVideoRef.current.srcObject=event.stream;};// Listen for ICE candidates and send them to the signaling server\npeerConnection.onicecandidate=function(event){if(event.candidate){socket.emit('ice-candidate',{roomId:roomId,candidate:event.candidate});}};// Listen for signaling events (offer, answer)\nsocket.on('offer',function(data){peerConnection.setRemoteDescription(new RTCSessionDescription(data.offer));peerConnection.createAnswer().then(function(answer){peerConnection.setLocalDescription(answer);socket.emit('answer',{roomId:roomId,answer:answer});}).catch(function(error){return console.error('Error creating answer:',error);});});socket.on('answer',function(data){peerConnection.setRemoteDescription(new RTCSessionDescription(data.answer));});// Create offer and emit it to the signaling server\npeerConnection.createOffer().then(function(offer){peerConnection.setLocalDescription(offer);socket.emit('offer',{roomId:roomId,offer:offer});}).catch(function(error){return console.error('Error creating offer:',error);});},[]);return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"video\",{ref:localVideoRef,autoPlay:true,playsInline:true,muted:true}),/*#__PURE__*/_jsx(\"video\",{ref:remoteVideoRef,autoPlay:true,playsInline:true})]});};export default Video;","map":{"version":3,"sources":["C:/Users/Muhammad suhail/Desktop/realtime-code-editor-main/src/components/Video.js"],"names":["React","useEffect","useRef","Video","socket","roomId","localVideoRef","remoteVideoRef","peerConnection","RTCPeerConnection","navigator","mediaDevices","getUserMedia","video","audio","then","stream","current","srcObject","addStream","catch","error","console","onaddstream","event","onicecandidate","candidate","emit","on","data","setRemoteDescription","RTCSessionDescription","offer","createAnswer","answer","setLocalDescription","createOffer"],"mappings":"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","sourcesContent":["// Video.js\r\n\r\nimport React, { useEffect, useRef } from 'react';\r\n\r\nconst Video = ({ socket, roomId }) => {\r\n    const localVideoRef = useRef();\r\n    const remoteVideoRef = useRef();\r\n    const peerConnection = new RTCPeerConnection();\r\n\r\n    useEffect(() => {\r\n        // Get user media and display it locally\r\n        navigator.mediaDevices.getUserMedia({ video: true, audio: true })\r\n            .then((stream) => {\r\n                localVideoRef.current.srcObject = stream;\r\n                peerConnection.addStream(stream);\r\n            })\r\n            .catch((error) => console.error('Error accessing media devices:', error));\r\n\r\n        // Listen for remote stream and display it\r\n        peerConnection.onaddstream = (event) => {\r\n            remoteVideoRef.current.srcObject = event.stream;\r\n        };\r\n\r\n        // Listen for ICE candidates and send them to the signaling server\r\n        peerConnection.onicecandidate = (event) => {\r\n            if (event.candidate) {\r\n                socket.emit('ice-candidate', { roomId, candidate: event.candidate });\r\n            }\r\n        };\r\n\r\n        // Listen for signaling events (offer, answer)\r\n        socket.on('offer', (data) => {\r\n            peerConnection.setRemoteDescription(new RTCSessionDescription(data.offer));\r\n            peerConnection.createAnswer()\r\n                .then((answer) => {\r\n                    peerConnection.setLocalDescription(answer);\r\n                    socket.emit('answer', { roomId, answer });\r\n                })\r\n                .catch((error) => console.error('Error creating answer:', error));\r\n        });\r\n\r\n        socket.on('answer', (data) => {\r\n            peerConnection.setRemoteDescription(new RTCSessionDescription(data.answer));\r\n        });\r\n\r\n        // Create offer and emit it to the signaling server\r\n        peerConnection.createOffer()\r\n            .then((offer) => {\r\n                peerConnection.setLocalDescription(offer);\r\n                socket.emit('offer', { roomId, offer });\r\n            })\r\n            .catch((error) => console.error('Error creating offer:', error));\r\n\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <video ref={localVideoRef} autoPlay playsInline muted />\r\n            <video ref={remoteVideoRef} autoPlay playsInline />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Video;\r\n"]},"metadata":{},"sourceType":"module"}